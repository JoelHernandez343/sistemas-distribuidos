import java.rmi.Naming;
import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;

public class ServerRMI {
    static int N, PORT;

    static class ClassRMI extends UnicastRemoteObject implements InterfaceRMI {
        /**
         * Autogenerated by Visual Studio Code
         */
        private static final long serialVersionUID = 6071434923306931870L;

        public ClassRMI() throws RemoteException {
            super();
        }

        public int[][] multiplica_matrices(int[][] A, int[][] B) throws RemoteException {
            int[][] C = new int[N / 2][N / 2];
            for (int i = 0; i < N / 2; i++)
                for (int j = 0; j < N / 2; j++)
                    for (int k = 0; k < N; k++)
                        C[i][j] += A[i][k] * B[j][k];
            return C;
        }
    }

    public static void main(String[] args) throws Exception {
        validateArguments(args);

        String url = "rmi://localhost:" + PORT + "/prueba";
        System.out.println(url);
        ClassRMI obj = new ClassRMI();

        Naming.rebind(url, obj);
    }

    static void validateArguments(String[] args) {
        if (args.length != 2) {
            System.err.println(ConsoleColors.ERR + " Number of arguments incorrect. Usage: ");
            System.err.println("\tjava ServerRMI <size> <port>");
            System.exit(1);
        }

        try {
            N = Integer.valueOf(args[0]);

            if (N != 4 && N != 500) {
                throw new NumberFormatException();
            }
        } catch (NumberFormatException e) {
            System.err.println(ConsoleColors.ERR + " Wrong size format, node must be a number and be 4 or 500.");
            System.exit(1);
        }

        try {
            PORT = Integer.valueOf(args[1]);
        } catch (NumberFormatException e) {
            System.err.println(ConsoleColors.ERR + " Wrong port format, port must be a number.");
            System.exit(1);
        }

        return;
    }
}
